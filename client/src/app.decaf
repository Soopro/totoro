polyfills = require('libs/polyfills.js')
Navigation = require('libs/navigation.js')

utils = require('utils.js')
core = require('core.js')

restStore = require('restapi/store.js')
restUser = require('restapi/user.js')


# app
App
  project:
    name: 'Totoro'
    version: '0.1.3'
    creator: [
      'Redyyu'
    ]

  # trigger
  onLaunch: (opts)->
    self = @
    console.info 'Launched...'
    console.info '-------------------'
    console.info self.project.name
    console.info self.project.version
    console.info self.project.creator.join(', ')
    if utils.isDefined(opts.query.debug)
      if opts.query.api
        core.config.baseURL.api = opts.query.api
        console.info 'Debug Mode'
        console.info 'APIUrl is ' + core.config.baseURL.api


  onShow: (opts)->
    self = @
    self.init()
    self.login()


  # global data
  configure: null

  # instances
  nav: new Navigation()

  # methods
  init_status: false
  init: (callback) ->
    self = @
    if not utils.isFunction(callback)
      callback = ->
    if self.init_status
      # other process is try to init
      _loop = 60
      interval_id = setInterval ->
        if not self.init_status and self.configure
          clearInterval(interval_id)
          callback(self.configure)
        else if _loop < 0
          clearInterval(interval_id)
          self._raise_error()
          return
        else
          _loop -= 1
      , 600
    else
      # try to init
      _init = (callback, retry)->
        retry = if not utils.isNumber(retry) then 0 else retry + 1
        if retry >= core.config.retry
          self._raise_error()
          return
        else if retry > 0
          console.info 'retry:', retry
        self.init_status = true

        restStore.configure.get()
        .then (configure)->
          self.init_status = false
          self.configure = configure
          callback(self.configure)
        .catch (error)->
          self.init_status = false
          _init(callback, retry)

      _init(callback)


  login_status: false
  login: (callback, force)->
    self = @
    if not utils.isFunction(callback)
      callback = ->
    session_token = core.session.get('token')
    if session_token and not force
      # logged
      callback(session_token)
      return
    else if self.login_status
      # other process is try to login
      _loop = 60
      interval_id = setInterval ->
        session_token = core.session.get('token')
        if not self.login_status and session_token
          clearInterval(interval_id)
          callback(session_token)
        else if _loop < 0
          clearInterval(interval_id)
          self._raise_error()
          return
        else
          _loop -= 1
      , 600
    else
      # try to login
      _login = (callback, retry)->
        retry = if not utils.isNumber(retry) then 0 else retry + 1
        if retry >= core.config.retry
          self._raise_error()
          return
        else if retry > 0
          console.info 'retry:', retry
        self.login_status = true

        wx.login
          success: (data) ->
            # get session_key and serve in back-end
            restUser.login
              code: data.code
            .then (auth)->
              self.login_status = false
              core.session.set('token', auth.token, auth.expires_in - 60)
              callback(auth.token)
            .catch (error)->
              self.login_status = false
              _login(callback, retry)
          fail: ->
            self.login_status = false
            _login(callback, retry)

      _login(callback)


  share: (opts)->
    self = @
    if not opts
      try
        opts =
          title: self.configure.meta.title
          src: self.configure.meta.share_img
          path: null
      catch e
        opts = {}

    share_opts =
      title: opts.title
      imageUrl: opts.src
      path: opts.path

    return share_opts

  sync_profile: (userinfo)->
    restUser.profile.update
      meta: core.reform_userinfo(userinfo)

  # helpers
  _raise_error: ->
    wx.redirectTo
      url: core.config.paths.error
